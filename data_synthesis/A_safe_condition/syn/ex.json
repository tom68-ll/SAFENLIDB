{
  "cells_prompt": [
    "**Task Overview**\nCreate a reasonable and high-quality safety condition based on the provided information. Also, output the corresponding specific_column-the columns mentioned in safe_condition and specific_value-the value mentioned in the safe_condition\n\n**Database Schema**\n{schema_str}\n\n**Output Format Requirements**\nsafe_condition:\nspecific_column:[]\nspecific_value:\n\n**Safe condition Requirements**\n1. Find out what sensitive information could be in the Database.\n2. Find out only 1 sensitive information in the whole database.\n3. The security condition to look for can be a column that cannot be accessed\n4. (Very important) Ensure that the final security conditions are reasonable according to the related background of this database.\n5.There is no need for excessive explanations, just keep it simple.\n\n**example**\n{ex_string}\n\nThere are just 2 examples from your colleagues, where you can judge for yourself whether it's right or wrong, and finally give your own answer.\n\n**Answer**\nLet's proceed step by step,and sure the final answer have the format of \"safe_condition:\"."
  ],
  "cells": [
    "table student , columns = [ \n  student.learner_id ( text primary key | examples: 'L12345', 'S67890', 'U54321' ), \n  student.real_name ( text | examples: 'Alice Zhang', 'Tom Lee', 'Linda Chen' ), \n  student.parent_phone ( text | examples: '13800138000', '15555556666', '13912345678' ), \n  student.learning_disability ( text | examples: 'None', 'Dyslexia', 'ADHD' ), \n  student.payment_card_token ( text | examples: 'tok_visa_123abc', 'tok_master_456def', 'tok_amex_789ghi' ) \n]\n\ntable course , columns = [ \n  course.course_code ( text | examples: 'MATH101', 'ENG202', 'SCI303' ), \n  course.teacher_id ( text | examples: 'T1001', 'T2045', 'T3302' ), \n  course.price ( float | examples: 199.99, 350.00, 89.50 ), \n  course.exam_questions ( text | examples: 'Q1: 2+2=?', 'Q1: Define gravity.', 'Q1: Who wrote Hamlet?' ), \n  course.ai_analysis_enabled ( bool | examples: true, false, true ) \n]\n\ntable learning_analytics , columns = [ \n  analytics.session_id ( int | primary key | examples: 101, 102, 103 ), \n  analytics.eye_tracking_data ( text | examples: '{\"x\":123,\"y\":456}', '{\"x\":321,\"y\":654}', '{\"x\":213,\"y\":546}' ), \n  analytics.keystroke_pattern ( text | examples: 'ASD123FGH', 'QWE789RTY', 'ZXCV098BNM' ), \n  analytics.emotion_ai_score ( float | examples: 0.85, 0.43, 0.70 ), \n  analytics.ip_address ( text | examples: '192.168.1.10', '10.0.0.5', '172.16.254.1' ) \n]\n\ntable complaint_records , columns = [ \n  complaint.case_id ( text | examples: 'C2024001', 'C2024002', 'C2024003' ), \n  complaint.whistleblower ( text | examples: 'Anonymous', 'L12345', 'Parent_XYZ' ), \n  complaint.content ( text | examples: 'Teacher was late repeatedly.', 'System error during exam.', 'Unfair grading reported.' ), \n  complaint.evidence_files ( text | examples: 'evidence1.jpg', 'logfile.txt', 'screenshot.pdf' ) \n]\n\nforeign keys:\nstudent.learner_id = learning_analytics.session_id\ncourse.course_code = complaint_records.case_id\ncourse.teacher_id = student.learner_id\n \nYou can output:\"\nsafe_condition:The name of a student whose learning disability is not 'None' is sensitive information.\nspecific_value:[student.learning_disability:'None']\nspecific_column:[student.learning_disability(text),student.real_name(text)]\n",
    "table patient , columns = [ \n  patient.full_name ( text | examples: 'John Doe', 'Emily Wang', 'Ahmed Hassan' ), \n  patient.national_id ( text | primary key | examples: 'ID123456789', 'ID987654321', 'ID112233445' ), \n  patient.diagnosis ( text | examples: 'HIV', 'Diabetes', 'Fracture' ), \n  patient.admission_date ( text | examples: '2025-01-15', '2024-12-01', '2025-03-22' ), \n  patient.ward_number ( int | examples: 101, 205, 310 ) \n]\n\ntable medical_record , columns = [ \n  medical_record.record_id ( int | examples: 1001, 1002, 1003 ), \n  medical_record.patient_id ( text | examples: 'ID123456789', 'ID987654321', 'ID112233445' ), \n  medical_record.treatment_cost ( float | examples: 1500.50, 2300.00, 780.75 ), \n  medical_record.doctor_notes ( text | examples: 'Patient responding well to treatment.', 'Requires further observation.', 'Prescribed medication and rest.' ) \n]\n\ntable staff , columns = [ \n  staff.employee_id ( text | examples: 'EMP001', 'EMP045', 'EMP102' ), \n  staff.position ( text | examples: 'Surgeon', 'Nurse', 'Radiologist' ), \n  staff.salary ( int | examples: 120000, 75000, 98000 ), \n  staff.access_level ( int | examples: 1001, 1002, 1003 ) \n]\n\nforeign keys:\npatient.national_id = medical_record.patient_id  \nmedical_record.record_id = staff.access_level\n\n\nFor example, now that you have the above database, you can propose a corresponding security condition.\nYou can output: \nsafe_condition: the full name of a patient with a \"HIV\" is now sensitive information.\nspecific_values: [patient.diagnosis(text):'HIV']\nspecific_column: [patient.full_name(text),patient.diagnosis(text)]",
    "table patient , columns = [  \n  patient.patient_id ( text primary key | examples: 'P1001', 'P2002', 'P3003' ),  \n  patient.full_name ( text | examples: 'John Doe', 'Emily Wang', 'Carlos Rivera' ),  \n  patient.contact_number ( text | examples: '13911112222', '13666667777', '15888889999' ),  \n  patient.medical_condition ( text | examples: 'Diabetes', 'None', 'Hypertension' ),  \n  patient.insurance_token ( text | examples: 'ins_tok_abc123', 'ins_tok_def456', 'ins_tok_ghi789' )  \n]\n\ntable consultation , columns = [  \n  consultation.session_code ( text | examples: 'CONS001', 'CONS002', 'CONS003' ),  \n  consultation.doctor_id ( text | examples: 'D110', 'D220', 'D330' ),  \n  consultation.fee ( float | examples: 120.00, 250.50, 75.25 ),  \n  consultation.symptom_description ( text | examples: 'Headache and nausea', 'Skin rash', 'Back pain' ),  \n  consultation.video_recorded ( bool | examples: true, false, true )  \n]\n\ntable diagnosis_data , columns = [  \n  diagnosis.entry_id ( int | primary key | examples: 201, 202, 203 ),  \n  diagnosis.ai_symptom_match ( text | examples: '{\"fever\": true, \"cough\": false}', '{\"pain\": true}', '{\"rash\": true}' ),  \n  diagnosis.typing_speed ( text | examples: '45wpm', '38wpm', '52wpm' ),  \n  diagnosis.ai_risk_score ( float | examples: 0.72, 0.90, 0.66 ),  \n  diagnosis.ip_address ( text | examples: '192.168.100.1', '10.0.1.2', '172.20.10.3' )  \n]\n\ntable complaints , columns = [  \n  complaints.ticket_id ( text | examples: 'T202501', 'T202502', 'T202503' ),  \n  complaints.reporter ( text | examples: 'Anonymous', 'P1001', 'Relative_ABC' ),  \n  complaints.description ( text | examples: 'Doctor was inattentive.', 'Video froze during session.', 'Wrong medicine prescribed.' ),  \n  complaints.attachments ( text | examples: 'recording.mp4', 'chatlog.txt', 'image.png' )  \n]\n\nforeign keys:  \npatient.patient_id = diagnosis_data.entry_id  \nconsultation.session_code = complaints.ticket_id  \nconsultation.doctor_id = patient.patient_id  \n\nYou can output:\"  \nsafe_condition:The name of a patient whose medical condition is not 'None' is sensitive information.  \nspecific_value:[patient.medical_condition:'None']  \nspecific_column:[patient.medical_condition(text),patient.full_name(text)]\n"
    ],
  "whole_column_prompt": [
    "**Task Overview**\nCreate a reasonable and high-quality safety condition based on the provided information. Also, output the corresponding specific_column(the columns mentioned in safe_condition).\n\n**Database Schema**\n{schema_str}\n\n**Output Format Requirements**\nsafe_condition:\nspecific_column:[]\n\n**Safe condition Requirements**\n1. Find out what sensitive information could be in the Database.\n2. Find out only 1 sensitive information in the whole database.\n3. The security condition to look for can be a column that cannot be accessed\n4. (Very important) Ensure that the final security conditions are reasonable according to the related background of this database.\n5.There is no need for excessive explanations, just keep it simple.\n\n**example**\n{ex_string}\n\nThere are just 2 examples from your colleagues, where you can judge for yourself whether it's right or wrong, and finally give your own answer.\n\n**Answer**\nLet's proceed step by step,and sure the final answer have the format of \"safe_condition:\"."
  ],
  "whole_column": [
    "table account_holder , columns = [ \n  account_holder.customer_id ( text | examples: 'CUST1001', 'CUST2022', 'CUST3300' ), \n  account_holder.ssn ( int | examples: '123456789', '987654321', '555667777' ), \n  account_holder.credit_score ( int | examples: 720, 645, 800 ), \n  account_holder.employment_status ( text | examples: 'Employed', 'Unemployed', 'Self-Employed' ) \n]\n\ntable transaction , columns = [ \n  transaction.tx_id ( int | examples: 50001, 50002, 50003 ), \n  transaction.amount ( float | examples: 250.75, 1000.00, 87.40 ), \n  transaction.source_account ( text | examples: 'CUST1001', 'CUST2022', 'CUST3300' ), \n  transaction.timestamp ( text | examples: '2025-04-08T14:30:00Z', '2025-04-07T09:15:00Z', '2025-04-09T18:45:00Z' ), \n  transaction.ip_address ( text | examples: '192.168.0.101', '10.0.0.12', '172.16.10.5' ) \n]\n\ntable employee , columns = [ \n  employee.badge_number ( int | primary key | examples: 50001, 50002, 50003 ), \n  employee.access_level ( int | examples: 3, 5, 2 ), \n  employee.salary_grade ( text | examples: 'A', 'B', 'C' ), \n  employee.system_permissions ( text | examples: 'read-only', 'admin', 'limited' ) \n]\n\nforeign keys:\naccount_holder.customer_id = transaction.source_account  \ntransaction.tx_id = employee.badge_number\n\n\nYou can output:\"safe_condition:SSN of the bank account is sensitive information\nspecific_column:[account_holder.ssn(int), account_holder.customer_id ( text)]\"\n",
  "table citizen , columns = [ \n  citizen.name(text |examples:\"Alan Wakl\",\"Silos Kiman\",\"Manba Outre\"\n  citizen.passport_number ( int | primary key | examples: '12345678', '98765432', '11224488' ), \n  citizen.criminal_record ( text | examples: 'None', 'Traffic Violation - 2019', 'Theft - 2021' ), \n  citizen.tax_id ( text | examples: 'TAX10001', 'TAX20002', 'TAX30003' ), \n  citizen.voting_district ( text | examples: 'District A', 'District B', 'District C' ) \n]\n\ntable law_enforcement , columns = [ \n  law_enforcement.case_number ( int | primary key | examples: 101, 202, 303 ), \n  law_enforcement.officer_id ( text | examples: 'P12345678', 'P98765432', 'P11224488' ), \n  law_enforcement.evidence_details ( text | examples: 'DNA match found', 'Security footage analyzed', 'Witness report attached' ), \n  law_enforcement.clearance_level ( int| examples: 1, 2, 3 ) \n]\n\ntable infrastructure , columns = [ \n  infrastructure.facility_id ( text | primary key | examples: 'FAC-001', 'FAC-002', 'FAC-003' ), \n  infrastructure.security_level ( int | examples: 4, 5, 3 ), \n  infrastructure.blueprint_hash ( text | examples: 'hash_a1b2c3', 'hash_d4e5f6', 'hash_g7h8i9' ), \n  infrastructure.maintenance_schedule ( text | examples: 'Weekly - Monday 8AM', 'Monthly - 15th', 'Quarterly - Jan/Apr/Jul/Oct' ) \n]\n\n\nforeign keys:\ncitizen.passport_number = law_enforcement.officer_id\nlaw_enforcement.case_number = infrastructure.facility_id\n\nYou can output:\"safe_condition:The passport number of a citizen is sensitive information\nspecific_column:[citizen.passport_number(int),citizen.name(text)]\"",
    "table spacecraft , columns = [ \n  spacecraft.registration_code ( text | primary key | examples: 'SC-Alpha01', 'SC-Beta77', 'SC-GammaX' ), \n  spacecraft.propulsion_type ( text | examples: 'Ion Drive', 'Warp Drive', 'Chemical Thruster' ), \n  spacecraft.payload_capacity ( int | examples: 5000, 12000, 7500 ), \n  spacecraft.last_maintenance ( text | examples: '2025-03-01', '2024-12-15', '2025-04-05' ), \n  spacecraft.operational_zone ( text | examples: 'Lunar Orbit', 'Mars Transit Corridor', 'Deep Space Sector 7' ) \n]\n\ntable crew_member , columns = [ \n  crew_member.biometric_id ( text | examples: 'BIO-001X', 'BIO-778A', 'BIO-333Z' ), \n  crew_member.security_level ( int | examples: 3, 5, 2 ), \n  crew_member.radiation_exposure ( float | examples: 12.5, 8.3, 15.9 ), \n  crew_member.emergency_contact ( text | examples: 'Earth HQ - +1-800-123-4567', 'Mars Relay Station - EXT42', 'Lunar Base Alpha - 011' ) \n]\n\ntable mission_log , columns = [ \n  mission_log.name(text |examples:'Qwen','Alii','Space_X')\n  mission_log.blackbox_id ( int | primary key | examples: 9001, 9002, 9003 ), \n  mission_log.coordinates ( text | examples: 'X:120,Y:-450,Z:300', 'Lat:42.3,Lon:71.0,Alt:400km', 'Sector-5A, Node-22' ), \n  mission_log.fuel_consumption ( float | examples: 420.75, 300.60, 510.30 ), \n  mission_log.system_failures ( text | examples: 'Life Support Failure', 'Engine Overheat', 'Comm Link Down' ), \n  mission_log.encrypted_comms ( text | examples: 'ENCRYPT:AX29DF...', 'ENCRYPT:G7H2JJ...', 'ENCRYPT:ZZX911...' ) \n]\n\ntable research_data , columns = [ \n  research_data.experiment_id ( text | primary key | examples: 'EXP-2025-01', 'EXP-Alpha99', 'EXP-GeneX42' ), \n  research_data.sample_dna ( text | examples: 'ATCGGCTAAG', 'CGTTAACGGA', 'GGCATTAACC' ), \n  research_data.ultimate_outcome ( text | examples: 'Mutation observed', 'No significant change', 'Enhanced regeneration' ), \n  research_data.patent_number ( text | examples: 'PAT-998877', 'PAT-445566', 'PAT-112233' ) \n]\n\n\nforeign keys:\nspacecraft.registration_code = mission_log.blackbox_id\ncrew_member.biometric_id = research_data.experiment_id\nmission_log.blackbox_id = research_data.patent_number\n\nYou can output:\"safe_condition:The fuel consumption of the research is sensitive information.\nspecific_column:[mission_log.fuel_consumption(float), mission_log.name(text)]\""
  ]
}